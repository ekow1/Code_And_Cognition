name: Deploy to EC2

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: latest
    
    - name: Install dependencies
      run: uv sync
    
    - name: Run tests
      run: |
        echo "Running tests..."
        # Add your test commands here
        # pytest tests/
      env:
        MONGO_URI: mongodb://localhost:27017
        MONGO_DB: test_db
        JWT_SECRET_KEY: test-secret-key

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Check Docker Compose version
          echo "üê≥ Docker Compose version:"
          docker compose version
          
          # Create application directory if it doesn't exist
          sudo mkdir -p /opt/codecognition-app
          sudo chown $USER:$USER /opt/codecognition-app
          cd /opt/codecognition-app
          
          # Check if repository exists, if not clone it
          if [ ! -d ".git" ]; then
            echo "üìÅ Cloning repository..."
            git clone https://github.com/${{ github.repository }}.git .
          else
            echo "üìÅ Pulling latest changes..."
            git pull origin main
          fi
          
          # Create SSL directory if it doesn't exist
          mkdir -p nginx/ssl
          
          # Check if Let's Encrypt certificate exists, if not create self-signed
          if [ ! -f "/etc/letsencrypt/live/codecognition.ekowenu.site/fullchain.pem" ]; then
            echo "üîí Creating self-signed SSL certificate for initial setup..."
            mkdir -p nginx/ssl
            sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout nginx/ssl/key.pem \
              -out nginx/ssl/cert.pem \
              -subj "/C=US/ST=State/L=City/O=Organization/CN=codecognition.ekowenu.site"
            sudo chown $USER:$USER nginx/ssl/*
            echo "‚ö†Ô∏è Using self-signed certificate. For production, run: sudo certbot certonly --standalone -d codecognition.ekowenu.site"
          else
            echo "‚úÖ Let's Encrypt certificate found!"
          fi
          
          # Create .env file if it doesn't exist
          if [ ! -f ".env" ]; then
            echo "‚öôÔ∏è Creating environment file..."
            cp env.example .env
          fi
          
          # Update .env with GitHub secrets if they exist
          if [ ! -z "${{ secrets.MONGO_URI }}" ]; then
            sed -i "s|MONGO_URI=.*|MONGO_URI=${{ secrets.MONGO_URI }}|g" .env
          fi
          if [ ! -z "${{ secrets.MONGO_DB }}" ]; then
            sed -i "s|MONGO_DB=.*|MONGO_DB=${{ secrets.MONGO_DB }}|g" .env
          fi
          if [ ! -z "${{ secrets.JWT_SECRET_KEY }}" ]; then
            sed -i "s|JWT_SECRET_KEY=.*|JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}|g" .env
          else
            # Generate a default JWT secret if not provided
            echo "üîë Generating default JWT secret..."
            sed -i "s|JWT_SECRET_KEY=.*|JWT_SECRET_KEY=default-secret-key-change-in-production-$(date +%s)|g" .env
          fi
          if [ ! -z "${{ secrets.SUPABASE_URL }}" ]; then
            sed -i "s|SUPABASE_URL=.*|SUPABASE_URL=${{ secrets.SUPABASE_URL }}|g" .env
          fi
          if [ ! -z "${{ secrets.SUPABASE_KEY }}" ]; then
            sed -i "s|SUPABASE_KEY=.*|SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}|g" .env
          fi
          
          # Pull latest Docker image
          echo "üê≥ Pulling latest Docker image..."
          docker compose pull
          
          # Stop and remove old containers
          echo "üõë Stopping old containers..."
          docker compose down
          
          # Start new containers
          echo "üöÄ Starting new containers..."
          docker compose up -d
          
          # Clean up old images
          echo "üßπ Cleaning up old images..."
          docker image prune -f
          
          # Wait for health check
          echo "‚è≥ Waiting for application to start..."
          sleep 30
          
          # Verify deployment (skip SSL verification for self-signed cert)
          echo "üè• Performing health check..."
          if curl -k -f https://codecognition.ekowenu.site/health; then
            echo "‚úÖ Deployment successful!"
            echo "üåê Application is running at: https://codecognition.ekowenu.site"
            echo "üìö API docs: https://codecognition.ekowenu.site/docs"
          else
            echo "‚ùå Deployment failed!"
            echo "üìã Checking container logs..."
            docker compose logs
            exit 1
          fi

          # Restart your existing app
          docker-compose up -d 